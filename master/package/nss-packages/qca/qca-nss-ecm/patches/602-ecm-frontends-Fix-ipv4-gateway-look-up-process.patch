From a5e8a9dfd1a84f7e82628d7d27fc6b767018a8be Mon Sep 17 00:00:00 2001
From: bitthief <bitthief@protonmail.ch>
Date: Wed, 9 Mar 2022 06:07:27 +0200
Subject: [PATCH] qca-nss-ecm: fix IPv4 gateway look-up process

Backport fix from QSDK 12.1r2.

---
 frontends/nss/ecm_nss_ipv4.c | 35 +++++++++++++++++++++++------------
 frontends/sfe/ecm_sfe_ipv4.c | 35 +++++++++++++++++++++++------------
 2 files changed, 46 insertions(+), 24 deletions(-)

--- a/frontends/nss/ecm_nss_ipv4.c
+++ b/frontends/nss/ecm_nss_ipv4.c
@@ -500,23 +500,34 @@ struct ecm_db_node_instance *ecm_nss_ipv
 #endif
 			if (!ecm_interface_mac_addr_get_no_route(dev, addr, node_addr)) {
 				ip_addr_t gw_addr = ECM_IP_ADDR_NULL;
+				bool on_link = true;
 
 				/*
-				 * Try one more time with gateway ip address if it exists.
+				 * Check if we have a gateway address. If yes, first we will try to get the MAC address
+				 * of that gateway. If it fails, we will send ARP request to that address
+				 * to find the node MAC address while processing the subsequent packets.
 				 */
-				if (!ecm_interface_find_gateway(addr, gw_addr)) {
-					DEBUG_WARN("%px: Node establish failed, there is no gateway address for 2nd mac lookup try\n", feci);
-					return NULL;
+				if (ecm_interface_find_gateway(addr, gw_addr)) {
+					DEBUG_TRACE("%px: Have a gw address " ECM_IP_ADDR_DOT_FMT "\n", feci, ECM_IP_ADDR_TO_DOT(gw_addr));
+					if (ecm_interface_mac_addr_get_no_route(dev, gw_addr, node_addr)) {
+						DEBUG_TRACE("%px: Found the mac address for gateway\n", feci);
+						goto done;
+					}
+					on_link = false;
 				}
 
-				DEBUG_TRACE("%px: Have a gw address " ECM_IP_ADDR_DOT_FMT "\n", feci, ECM_IP_ADDR_TO_DOT(gw_addr));
-
-				if (ecm_interface_mac_addr_get_no_route(dev, gw_addr, node_addr)) {
-					DEBUG_TRACE("%px: Found the mac address for gateway\n", feci);
-					goto done;
-				}
-
-				ecm_interface_send_arp_request(dev, addr, false, gw_addr);
+				/*
+				 * If dev is a bridge port, we should use the bridge device for the ARP request.
+				 */
+				if (!ecm_front_end_is_bridge_port(dev)) {
+					ecm_interface_send_arp_request(dev, addr, on_link, gw_addr);
+				} else {
+					struct net_device *master;
+					master = ecm_interface_get_and_hold_dev_master(dev);
+					DEBUG_ASSERT(master, "%px: Expected a master\n", feci);
+					ecm_interface_send_arp_request(master, addr, on_link, gw_addr);
+					dev_put(master);
+ 				}
 
 				DEBUG_WARN("%px: failed to obtain any node address for host " ECM_IP_ADDR_DOT_FMT "\n", feci, ECM_IP_ADDR_TO_DOT(addr));
 
--- a/frontends/sfe/ecm_sfe_ipv4.c
+++ b/frontends/sfe/ecm_sfe_ipv4.c
@@ -227,23 +227,34 @@ struct ecm_db_node_instance *ecm_sfe_ipv
 		case ECM_DB_IFACE_TYPE_IPSEC_TUNNEL:
 			if (!ecm_interface_mac_addr_get_no_route(dev, addr, node_addr)) {
 				ip_addr_t gw_addr = ECM_IP_ADDR_NULL;
+				bool on_link = true;
 
 				/*
-				 * Try one more time with gateway ip address if it exists.
+				 * Check if we have a gateway address. If yes, first we will try to get the MAC address
+				 * of that gateway. If it fails, we will send ARP request to that address
+				 * to find the node MAC address while processing the subsequent packets.
 				 */
-				if (!ecm_interface_find_gateway(addr, gw_addr)) {
-					DEBUG_WARN("Node establish failed, there is no gateway address for 2nd mac lookup try\n");
-					return NULL;
+				if (ecm_interface_find_gateway(addr, gw_addr)) {
+					DEBUG_TRACE("%px: Have a gw address " ECM_IP_ADDR_DOT_FMT "\n", feci, ECM_IP_ADDR_TO_DOT(gw_addr));
+					if (ecm_interface_mac_addr_get_no_route(dev, gw_addr, node_addr)) {
+						DEBUG_TRACE("%px: Found the mac address for gateway\n", feci);
+						goto done;
+					}
+					on_link = false;
 				}
 
-				DEBUG_TRACE("Have a gw address " ECM_IP_ADDR_DOT_FMT "\n", ECM_IP_ADDR_TO_DOT(gw_addr));
-
-				if (ecm_interface_mac_addr_get_no_route(dev, gw_addr, node_addr)) {
-					DEBUG_TRACE("Found the mac address for gateway\n");
-					goto done;
-				}
-
-				ecm_interface_send_arp_request(dev, addr, false, gw_addr);
+				/*
+				 * If dev is a bridge port, we should use the bridge device for the ARP request.
+				 */
+				if (!ecm_front_end_is_bridge_port(dev)) {
+					ecm_interface_send_arp_request(dev, addr, on_link, gw_addr);
+				} else {
+					struct net_device *master;
+					master = ecm_interface_get_and_hold_dev_master(dev);
+					DEBUG_ASSERT(master, "%px: Expected a master\n", feci);
+					ecm_interface_send_arp_request(master, addr, on_link, gw_addr);
+					dev_put(master);
+ 				}
 
 				DEBUG_TRACE("failed to obtain any node address for host " ECM_IP_ADDR_DOT_FMT "\n", ECM_IP_ADDR_TO_DOT(addr));
 
