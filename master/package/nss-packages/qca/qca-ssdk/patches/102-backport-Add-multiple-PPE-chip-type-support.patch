From ae1e84ec2e05d41a2672cb6f7bc8c54dce2862e3 Mon Sep 17 00:00:00 2001
From: Luo Jie <quic_luoj@quicinc.com>
Date: Sat, 2 Jul 2022 15:35:24 +0800
Subject: [PATCH] qca-ssdk: Add multiple PPE chip type support

Change-Id: I3758fb499f540f3aed69862ff88b764a7e623782
Signed-off-by: Luo Jie <quic_luoj@quicinc.com>
---
 include/adpt/adpt.h              | 10 ++++++
 src/adpt/adpt.c                  | 26 ++++++++++++++
 src/adpt/hppe/adpt_hppe_shaper.c | 61 +++++++++++++++++++++++---------
 3 files changed, 80 insertions(+), 17 deletions(-)

--- a/include/adpt/adpt.h
+++ b/include/adpt/adpt.h
@@ -2130,6 +2130,16 @@ typedef struct
 /* auto_insert_flag_1 */
 }adpt_api_t;
 
+typedef enum {
+	HPPE_TYPE,
+	CPPE_TYPE,
+	APPE_TYPE,
+	MPPE_TYPE,
+	MAX_PPE_TYPE,
+} adpt_ppe_type_t;
+
+adpt_ppe_type_t adpt_ppe_type_get(a_uint32_t dev_id);
+
 #define ADPT_IS_PPORT(port_id) (((FAL_PORT_ID_TYPE(port_id))==FAL_PORT_TYPE_PPORT && \
 			FAL_PORT_ID_VALUE(port_id) < SSDK_MAX_PORT_NUM)?1:0)
 #define ADPT_IS_TRUNK(port_id) (((FAL_PORT_ID_TYPE(port_id))==FAL_PORT_TYPE_TRUNK && \
--- a/src/adpt/adpt.c
+++ b/src/adpt/adpt.c
@@ -64,6 +64,32 @@ a_uint32_t adapt_scomphy_revision_get(a_
 }
 #endif
 
+adpt_ppe_type_t adpt_ppe_type_get(a_uint32_t dev_id)
+{
+	adpt_ppe_type_t ppe_type = MAX_PPE_TYPE;
+#if defined(HPPE)
+	ssdk_chip_type chip_type = g_chip_ver[dev_id].chip_type;
+	a_uint32_t revision = g_chip_ver[dev_id].chip_revision;
+
+	switch (chip_type) {
+		case CHIP_HPPE:
+			ppe_type = HPPE_TYPE;
+			if (revision == CPPE_REVISION)
+				ppe_type = CPPE_TYPE;
+			break;
+		case CHIP_APPE:
+			ppe_type = APPE_TYPE;
+			if (revision == MPPE_REVISION)
+				ppe_type = MPPE_TYPE;
+			break;
+		default:
+			break;
+	}
+#endif
+
+	return ppe_type;
+}
+
 a_uint32_t adpt_chip_type_get(a_uint32_t dev_id)
 {
 	return g_chip_ver[dev_id].chip_type;
--- a/src/adpt/hppe/adpt_hppe_shaper.c
+++ b/src/adpt/hppe/adpt_hppe_shaper.c
@@ -33,13 +33,9 @@
 #define NR_ADPT_HPPE_SHAPER_METER_TOKEN_UNIT         8
 #define ADPT_HPPE_SHAPER_METER_UNIT_BYTE       0
 #define ADPT_HPPE_SHAPER_METER_UNIT_FRAME      1
-#if defined(MPPE)
-#define ADPT_HPPE_FREQUENCY      200  /*MHZ*/
-#elif defined(APPE)
-#define ADPT_HPPE_FREQUENCY      353  /*MHZ*/
-#else
+#define ADPT_MPPE_FREQUENCY      200  /*MHZ*/
+#define ADPT_APPE_FREQUENCY      353  /*MHZ*/
 #define ADPT_HPPE_FREQUENCY      300  /*MHZ*/
-#endif
 #define ADPT_HPPE_SHAPER_BURST_SIZE_UNIT      65536
 #define ADPT_HPPE_SHAPER_REFRESH_BITS  18
 #define ADPT_HPPE_SHAPER_BUCKET_SIZE_BITS  14
@@ -182,12 +178,37 @@ hppe_shaper_burst_size[NR_ADPT_HPPE_SHAP
 	},
 };
 
+static inline a_uint32_t __adpt_hppe_freq_get(a_uint32_t dev_id)
+{
+	a_uint32_t ppe_freq = ADPT_HPPE_FREQUENCY;
+	adpt_ppe_type_t ppe_type = adpt_ppe_type_get(dev_id);
+
+	switch (ppe_type) {
+		case HPPE_TYPE:
+		case CPPE_TYPE:
+			ppe_freq = ADPT_HPPE_FREQUENCY;
+			break;
+		case APPE_TYPE:
+			ppe_freq = ADPT_APPE_FREQUENCY;
+			break;
+		case MPPE_TYPE:
+			ppe_freq = ADPT_MPPE_FREQUENCY;
+			break;
+		default:
+			SSDK_ERROR("Unknown chip type: %d\n", ppe_type);
+			break;
+	}
+
+	return ppe_freq;
+}
+
 static sw_error_t
-__adpt_hppe_port_shaper_max_rate(a_uint32_t time_slot)
+__adpt_hppe_port_shaper_max_rate(a_uint32_t dev_id, a_uint32_t time_slot)
 {
 	a_uint32_t i = 0, j = 0;
 	a_uint32_t time_cycle;
 	a_uint64_t temp, temp1,temp2;
+	a_uint32_t ppe_freq = __adpt_hppe_freq_get(dev_id);
 
 	/* time_cycle is ns*/
 	time_cycle = ( time_slot * 8);
@@ -195,7 +216,8 @@ __adpt_hppe_port_shaper_max_rate(a_uint3
 	for (j = 0; j < 8; j++)
 	{
 		/*max rate unit is bps*/
-		temp1 = (a_uint64_t)(ADPT_HPPE_SHAPER_REFRESH_MAX  * 1000 * 8) * (a_uint64_t)(ADPT_HPPE_FREQUENCY * 1000);
+		temp1 = (a_uint64_t)(ADPT_HPPE_SHAPER_REFRESH_MAX  * 1000 * 8) *
+			(a_uint64_t)(ppe_freq * 1000);
 		temp2 =  hppe_shaper_token_unit[i][j] * time_cycle;
 
 		do_div(temp1, temp2);
@@ -213,7 +235,8 @@ __adpt_hppe_port_shaper_max_rate(a_uint3
 	for (j = 0; j < 8; j++)
 	{
 		/* max rate unit  is 1/1000 pps*/
-		temp1 = (a_uint64_t)(ADPT_HPPE_SHAPER_REFRESH_MAX * 1000) * 1000 * (a_uint64_t)(ADPT_HPPE_FREQUENCY * 1000);
+		temp1 = (a_uint64_t)(ADPT_HPPE_SHAPER_REFRESH_MAX * 1000) * 1000 *
+			(a_uint64_t)(ppe_freq * 1000);
 		temp2 = (a_uint64_t)hppe_shaper_token_unit[i][j] * time_cycle;
 
 		do_div(temp1, temp2);
@@ -231,11 +254,12 @@ __adpt_hppe_port_shaper_max_rate(a_uint3
 }
 
 static sw_error_t
-__adpt_hppe_flow_shaper_max_rate(a_uint32_t time_slot)
+__adpt_hppe_flow_shaper_max_rate(a_uint32_t dev_id, a_uint32_t time_slot)
 {
 	a_uint32_t i = 0, j = 0;
 	a_uint32_t time_cycle;
 	a_uint64_t temp, temp1,temp2;
+	a_uint32_t ppe_freq = __adpt_hppe_freq_get(dev_id);
 
 	/* time_cycle is ns*/
 	time_cycle = ( time_slot * 8);
@@ -243,7 +267,8 @@ __adpt_hppe_flow_shaper_max_rate(a_uint3
 	for (j = 0; j < 8; j++)
 	{
 		/*max rate unit is bps*/
-		temp1 = (a_uint64_t)(ADPT_HPPE_SHAPER_REFRESH_MAX  * 1000 * 8) * (a_uint64_t)(ADPT_HPPE_FREQUENCY * 1000);
+		temp1 = (a_uint64_t)(ADPT_HPPE_SHAPER_REFRESH_MAX  * 1000 * 8) *
+			(a_uint64_t)(ppe_freq * 1000);
 		temp2 =  hppe_shaper_token_unit[i][j] * time_cycle;
 
 		do_div(temp1, temp2);
@@ -261,7 +286,8 @@ __adpt_hppe_flow_shaper_max_rate(a_uint3
 	for (j = 0; j < 8; j++)
 	{
 		/* max rate unit  is 1/1000 pps*/
-		temp1 = (a_uint64_t)(ADPT_HPPE_SHAPER_REFRESH_MAX * 1000) * 1000 * (a_uint64_t)(ADPT_HPPE_FREQUENCY * 1000);
+		temp1 = (a_uint64_t)(ADPT_HPPE_SHAPER_REFRESH_MAX * 1000) * 1000 *
+			(a_uint64_t)(ppe_freq * 1000);
 		temp2 = (a_uint64_t)hppe_shaper_token_unit[i][j] * time_cycle;
 
 		do_div(temp1, temp2);
@@ -279,14 +305,15 @@ __adpt_hppe_flow_shaper_max_rate(a_uint3
 }
 
 static sw_error_t
-__adpt_hppe_queue_shaper_max_rate(a_uint32_t time_slot)
+__adpt_hppe_queue_shaper_max_rate(a_uint32_t dev_id, a_uint32_t time_slot)
 {
 	a_uint32_t i = 0, j = 0;
 	a_uint32_t time_cycle;
 	a_uint64_t temp, temp1,temp2;
+	a_uint32_t ppe_freq = __adpt_hppe_freq_get(dev_id);
 
 	/* time_cycle is ns*/
-	time_cycle = ( time_slot * 8) /ADPT_HPPE_FREQUENCY;
+	time_cycle = ( time_slot * 8) / ppe_freq;
 
 	for (j = 0; j < 8; j++)
 	{
@@ -833,7 +860,7 @@ adpt_hppe_flow_shaper_time_slot_set(a_ui
 	shp_slot_cfg_l1.bf.l1_shp_slot_time = time_slot;
 	hppe_shp_slot_cfg_l1_set(dev_id, &shp_slot_cfg_l1);
 
-	__adpt_hppe_flow_shaper_max_rate(time_slot);
+	__adpt_hppe_flow_shaper_max_rate(dev_id, time_slot);
 
 	return SW_OK;
 }
@@ -1285,7 +1312,7 @@ adpt_hppe_port_shaper_time_slot_set(a_ui
 	shp_slot_cfg_port.bf.port_shp_slot_time = time_slot;
 	hppe_shp_slot_cfg_port_set(dev_id, &shp_slot_cfg_port);
 
-	__adpt_hppe_port_shaper_max_rate(time_slot);
+	__adpt_hppe_port_shaper_max_rate(dev_id, time_slot);
 
 	__adpt_hppe_shaper_max_burst_size();
 
@@ -1591,7 +1618,7 @@ adpt_hppe_queue_shaper_time_slot_set(a_u
 	shp_slot_cfg_l0.bf.l0_shp_slot_time = time_slot;
 	hppe_shp_slot_cfg_l0_set(dev_id, &shp_slot_cfg_l0);
 
-	__adpt_hppe_queue_shaper_max_rate(time_slot);
+	__adpt_hppe_queue_shaper_max_rate(dev_id, time_slot);
 
 	return SW_OK;
 }
