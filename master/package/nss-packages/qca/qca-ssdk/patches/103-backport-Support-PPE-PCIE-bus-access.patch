From e53dad27d78dc876fe3f4cb95e2648e82ef17989 Mon Sep 17 00:00:00 2001
From: Luo Jie <quic_luoj@quicinc.com>
Date: Sat, 2 Jul 2022 14:23:10 +0800
Subject: [PATCH] qca-ssdk: Support PPE PCIE bus access

Change-Id: Iea9f682ee0e91a5ad46aafceece5f9634ff727a3
Signed-off-by: Luo Jie <quic_luoj@quicinc.com>
---
 include/init/ssdk_dts.h  |  4 +++-
 include/init/ssdk_init.h |  1 +
 src/init/ssdk_dts.c      | 21 +++++++++++++++++++--
 src/init/ssdk_plat.c     | 23 +++++++++++++++++++++--
 4 files changed, 44 insertions(+), 5 deletions(-)

--- a/include/init/ssdk_dts.h
+++ b/include/init/ssdk_dts.h
@@ -1,6 +1,6 @@
 /*
  * Copyright (c) 2018-2019, The Linux Foundation. All rights reserved.
- * Copyright (c) 2021 Qualcomm Innovation Center, Inc. All rights reserved.
+ * Copyright (c) 2021-2022 Qualcomm Innovation Center, Inc. All rights reserved.
  *
  * Permission to use, copy, modify, and/or distribute this software for any
  * purpose with or without fee is hereby granted, provided that the above
@@ -112,6 +112,7 @@ typedef struct
 	a_bool_t is_emulation;
 	a_uint32_t emu_chip_ver; /*only valid when is_emulation is true*/
 	a_uint32_t clk_mode;
+	a_uint32_t pcie_hw_base;
 } ssdk_dt_cfg;
 
 #define SSDK_MAX_NR_ETH 6
@@ -162,6 +163,7 @@ struct mii_bus *
 ssdk_dts_miibus_get(a_uint32_t dev_id, a_uint32_t phy_addr);
 hsl_reg_mode ssdk_switch_reg_access_mode_get(a_uint32_t dev_id);
 void ssdk_switch_reg_map_info_get(a_uint32_t dev_id, ssdk_reg_map_info *info);
+a_uint32_t ssdk_switch_pcie_base_get(a_uint32_t dev_id);
 #ifdef DESS
 hsl_reg_mode ssdk_psgmii_reg_access_mode_get(a_uint32_t dev_id);
 void ssdk_psgmii_reg_map_info_get(a_uint32_t dev_id, ssdk_reg_map_info *info);
--- a/include/init/ssdk_init.h
+++ b/include/init/ssdk_init.h
@@ -70,6 +70,7 @@ extern "C" {
     {
         HSL_REG_MDIO = 0,
         HSL_REG_LOCAL_BUS,
+        HSL_REG_PCIE_BUS,
     } hsl_reg_mode;
 
     typedef sw_error_t
--- a/src/init/ssdk_dts.c
+++ b/src/init/ssdk_dts.c
@@ -246,6 +246,12 @@ void ssdk_switch_reg_map_info_get(a_uint
 	info->base_addr = cfg->switchreg_base_addr;
 	info->size = cfg->switchreg_size;
 }
+a_uint32_t ssdk_switch_pcie_base_get(a_uint32_t dev_id)
+{
+	ssdk_dt_cfg* cfg = ssdk_dt_global.ssdk_dt_switch_nodes[dev_id];
+
+	return cfg->pcie_hw_base;
+}
 #ifdef DESS
 void ssdk_psgmii_reg_map_info_get(a_uint32_t dev_id, ssdk_reg_map_info *info)
 {
@@ -997,8 +1003,19 @@ static sw_error_t ssdk_dt_parse_access_m
 
 		SSDK_INFO("switchreg_base_addr: 0x%x\n", ssdk_dt_priv->switchreg_base_addr);
 		SSDK_INFO("switchreg_size: 0x%x\n", ssdk_dt_priv->switchreg_size);
-	}
-	else {
+	} else if (!strcmp(ssdk_dt_priv->reg_access_mode, "pcie bus")) {
+		ssdk_dt_priv->switch_reg_access_mode = HSL_REG_PCIE_BUS;
+
+		reg_cfg = of_get_property(switch_node, "reg", &len);
+		if(!reg_cfg) {
+			SSDK_ERROR("%s: error reading properties for reg\n",
+				switch_node->name);
+			return SW_BAD_PARAM;
+		}
+		ssdk_dt_priv->pcie_hw_base = be32_to_cpup(reg_cfg);
+		SSDK_INFO("PCIE bus pcie_base_addr: 0x%x\n",
+				ssdk_dt_priv->pcie_hw_base);
+	} else {
 		ssdk_dt_priv->switch_reg_access_mode = HSL_REG_MDIO;
 	}
 
--- a/src/init/ssdk_plat.c
+++ b/src/init/ssdk_plat.c
@@ -116,6 +116,7 @@
 #ifdef IN_LINUX_STD_PTP
 #include "hsl_ptp.h"
 #endif
+
 /*qca808x_start*/
 
 extern struct qca_phy_priv **qca_phy_priv_global;
@@ -556,6 +557,11 @@ u16 qca_phy_mmd_read(u32 dev_id, u32 phy
 	return value;
 }
 /*qca808x_end*/
+
+#if defined(SSDK_PCIE_BUS)
+extern u32 ppe_mem_read(u32 reg);
+extern void ppe_mem_write(u32 reg, u32 val);
+#endif
 sw_error_t
 qca_switch_reg_read(a_uint32_t dev_id, a_uint32_t reg_addr, a_uint8_t * reg_data, a_uint32_t len)
 {
@@ -567,7 +573,13 @@ qca_switch_reg_read(a_uint32_t dev_id, a
 	if ((reg_addr%4)!= 0)
 	return SW_BAD_PARAM;
 
-	reg_val = readl(qca_phy_priv_global[dev_id]->hw_addr + reg_addr);
+#if defined(SSDK_PCIE_BUS)
+	if (HSL_REG_PCIE_BUS == ssdk_switch_reg_access_mode_get(dev_id)) {
+		uint32_t pcie_base = ssdk_switch_pcie_base_get(dev_id);
+		reg_val = ppe_mem_read(pcie_base + reg_addr);
+	} else
+#endif
+		reg_val = readl(qca_phy_priv_global[dev_id]->hw_addr + reg_addr);
 
 	aos_mem_copy(reg_data, &reg_val, sizeof (a_uint32_t));
 	return 0;
@@ -584,7 +596,14 @@ qca_switch_reg_write(a_uint32_t dev_id,
 	return SW_BAD_PARAM;
 
 	aos_mem_copy(&reg_val, reg_data, sizeof (a_uint32_t));
-	writel(reg_val, qca_phy_priv_global[dev_id]->hw_addr + reg_addr);
+
+#if defined(SSDK_PCIE_BUS)
+	if (HSL_REG_PCIE_BUS == ssdk_switch_reg_access_mode_get(dev_id)) {
+		uint32_t pcie_base = ssdk_switch_pcie_base_get(dev_id);
+		ppe_mem_write(pcie_base + reg_addr, reg_val);
+	} else
+#endif
+		writel(reg_val, qca_phy_priv_global[dev_id]->hw_addr + reg_addr);
 	return 0;
 }
 
